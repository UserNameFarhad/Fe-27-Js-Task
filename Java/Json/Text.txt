JSON JavaScript Object Notation
Json bize obyekt seklinde verilmis bir datadi, sadece obyekt olur dirnaq icerisinde
Backend ile data alis verisini JSON vasitesile edirik

/* JSON (JavaScript Object Notation) — это формат для хранения и обмена данными, который часто используется в веб-разработке. В JavaScript JSON можно использовать для сериализации объектов и массивов, а также для передачи данных между клиентом и сервером. Ниже приведены основные примеры работы с JSON в JavaScript на русском языке.

Основные операции с JSON в JavaScript
Создание JSON-объекта */

// let человек = {
//     имя: "Иван",
//     возраст: 30,
//     женат: true,
//     дети: ["Маша", "Дима"],
//     адрес: {
//         город: "Москва",
//         улица: "Ленина"
//     }
// };

/* Сериализация объекта в JSON-строку
Для сериализации объекта в JSON-строку используется метод JSON.stringify. */

// let jsonString = JSON.stringify(человек);
// console.log(jsonString);
// Вывод: {"имя":"Иван","возраст":30,"женат":true,"дети":["Маша","Дима"],"адрес":{"город":"Москва","улица":"Ленина"}}

/* Десериализация JSON-строки в объект
Для десериализации JSON-строки в объект используется метод JSON.parse.*/

// let jsonObject = JSON.parse(jsonString);
// console.log(jsonObject);
// Вывод: { имя: 'Иван', возраст: 30, женат: true, дети: [ 'Маша', 'Дима' ], адрес: { город: 'Москва', улица: 'Ленина' }

data.json bolmesinde bele bir json yaratmaq olar
{
    "color": ["red","green","blue"],
    "name": "ramin",
    "user": [
       {"name":"ramin"},
       {"name":"ramin"},
       {"name":"ramin"}
    ]
}

API - Aplication Programing İnterface

API — это посредник между приложением и сервером. Каждый раз, когда приложение связывается с другим приложением или с сервером, используется API. Например, посетитель ресторана (пользователь) заказывает у официанта (API) еду с кухни (сервер). Посетителю не нужно знать, как работает кухня, чтобы получить заказ.

API proqram və server arasında vasitəçidir. Tətbiq hər dəfə başqa proqramla və ya serverlə əlaqə saxladıqda API istifadə olunur. Məsələn, restoranın ziyarətçisi (istifadəçisi) mətbəxdən (serverdən) ofisiantdan (API) yemək sifariş edir. Ziyarətçinin sifariş almaq üçün mətbəxin necə işlədiyini bilməsi lazım deyil.

API – это механизмы, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов. Например, система ПО метеослужбы содержит ежедневные данные о погоде.

API-lər bir sıra təriflər və protokollar vasitəsilə proqram komponentlərinin bir-birinə qoşulmasına imkan verən mexanizmlərdir. 

get - datani getirmek ucundur
put - yenilemek, update etmek ucun
post - gondermek ucun
delete - silmek ucun

////////////

const a = () => {}
const b = () => {}

a()
b() 

burda JavaScript dili sinxron dil oldugu ucun birinci a oxunur sonra ise b oxunur

const a = async () => {}
const b = async () => {}

biz bunlari asinxron qaydada yazsaq bunlar her ikisi bir isleyecek

////


Promise (промис) — это объект в JavaScript, который используется для представления и обработки асинхронных операций. Промисы позволяют выполнять действия, которые могут завершиться в будущем, и предоставляют методы для обработки успешного выполнения или ошибки.

Основные состояния промиса
Pending (ожидание): начальное состояние, в котором промис ещё не завершён.
Fulfilled (выполнен): состояние, в котором асинхронная операция завершилась успешно.
Rejected (отклонён): состояние, в котором асинхронная операция завершилась с ошибкой.

Создание промиса
Создание промиса осуществляется с помощью конструктора Promise, который принимает функцию с двумя параметрами: resolve и reject. Эти параметры используются для перехода промиса в состояния "выполнен" или "отклонён".

const myPromise = new Promise((resolve, reject) => {
  // Асинхронная операция
  let success = true; // Или любая другая логика
  if (success) {
    resolve('Operation was successful!');
  } else {
    reject('Operation failed.');
  }
});

