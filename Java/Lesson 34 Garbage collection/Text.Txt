Garbage Collection (сборка мусора) в JavaScript — это процесс автоматического управления памятью, который удаляет объекты, которые больше не используются, освобождая занимаемую ими память для других нужд. Понимание работы сборки мусора важно для эффективного управления памятью и предотвращения утечек памяти.

### Как работает сборка мусора в JavaScript

В JavaScript сборка мусора осуществляется автоматически, что освобождает разработчика от необходимости вручную управлять памятью. Основной принцип заключается в определении, какие объекты больше не могут быть достигнуты (недоступны) и их удалении.

#### Основные алгоритмы сборки мусора

1. **Mark-and-Sweep (Пометка и очистка)**:
   - **Mark**: Сборщик мусора начинает с корневых объектов (root objects), таких как глобальные объекты и объекты стека, и помечает все доступные (reachable) объекты.
   - **Sweep**: Затем сборщик мусора проходит по памяти и удаляет все объекты, которые не были помечены как доступные.

2. **Reference Counting (Подсчет ссылок)**:
   - Подсчитываются ссылки на каждый объект. Когда счетчик ссылок объекта достигает нуля, объект считается недоступным и может быть удален. Этот метод имеет проблему с циклическими ссылками (когда два объекта ссылаются друг на друга, но ни один из них больше не используется).

#### Пример работы сборщика мусора в JavaScript:

```javascript
function createObject() {
    let obj = {};
    return obj;
}

let obj1 = createObject();
let obj2 = createObject();

obj1 = null;  // obj1 больше не доступен, память будет освобождена сборщиком мусора
obj2 = null;  // obj2 больше не доступен, память будет освобождена сборщиком мусора
```

### Советы по предотвращению утечек памяти

1. **Избегайте глобальных переменных**:
   - Глобальные переменные остаются доступными на протяжении всего жизненного цикла приложения, что может привести к утечкам памяти. Используйте локальные переменные и функции для ограничивания области видимости.

2. **Правильное использование замыканий**:
   - Замыкания могут удерживать ссылки на переменные, что может предотвратить их сборку мусора. Убедитесь, что вы не удерживаете ненужные ссылки.

3. **Отсоединение обработчиков событий**:
   - Обработчики событий могут удерживать ссылки на элементы DOM. Убедитесь, что вы удаляете обработчики событий, когда они больше не нужны.

4. **Использование WeakMap и WeakSet**:
   - Эти структуры данных позволяют хранить слабые ссылки на объекты, которые не предотвращают их сборку мусора.

#### Пример использования WeakMap:

```javascript
let wm = new WeakMap();
let obj = {};

wm.set(obj, "some value");
console.log(wm.get(obj));  // Output: "some value"

obj = null;  // Объект будет удален сборщиком мусора, так как WeakMap не предотвращает это
```

### Заключение

Сборка мусора в JavaScript помогает автоматически управлять памятью, но понимание её работы и соблюдение лучших практик могут помочь предотвратить утечки памяти и улучшить производительность приложений.