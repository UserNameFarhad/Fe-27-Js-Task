Əlbəttə, JavaScript-də zibil toplama (garbage collection) haqqında məlumatları Azərbaycan dilinə tərcümə edim:

### JavaScript-də Zibil Toplama

JavaScript-də zibil toplama, artıq istifadə olunmayan obyektləri avtomatik olaraq silən və yaddaşı digər ehtiyaclar üçün azad edən prosesdir. Yaddaşın effektiv idarə olunması və yaddaş sızıntılarının qarşısının alınması üçün zibil toplamanın iş prinsipini anlamaq vacibdir.

### JavaScript-də Zibil Toplama Necə İşləyir

JavaScript-də zibil toplama avtomatik olaraq həyata keçirilir və bu, inkişaf etdiricini yaddaşı əl ilə idarə etmə zərurətindən azad edir. Əsas prinsip, hansı obyektlərin artıq istifadə olunmadığını (çatımlı olmadığını) müəyyən etmək və onları silməkdir.

#### Əsas Zibil Toplama Alqoritmləri

1. **Mark-and-Sweep (İşarələmə və Təmizləmə)**:
   - **Mark (İşarələmə)**: Zibil toplayıcı kök obyektlərdən (root objects), məsələn qlobal obyektlər və stack obyektlərindən başlayır və bütün çatımlı obyektləri işarələyir.
   - **Sweep (Təmizləmə)**: Daha sonra zibil toplayıcı yaddaşı keçərək işarələnməmiş bütün obyektləri silir.

2. **Reference Counting (İstinad Sayma)**:
   - Hər bir obyektə istinadların sayı sayılır. Obyektin istinad sayısı sıfıra çatdıqda, obyekt çatımlı hesab olunmur və silinə bilər. Bu metod dövri istinadlar problemi ilə üzləşir (iki obyekt bir-birinə istinad edərkən, amma artıq istifadə olunmadıqda).

#### JavaScript-də Zibil Toplama Nümunəsi:

```javascript
function createObject() {
    let obj = {};
    return obj;
}

let obj1 = createObject();
let obj2 = createObject();

obj1 = null;  // obj1 artıq çatımlı deyil, yaddaş zibil toplayıcı tərəfindən azad ediləcək
obj2 = null;  // obj2 artıq çatımlı deyil, yaddaş zibil toplayıcı tərəfindən azad ediləcək
```

### Yaddaş Sızıntılarının Qarşısını Almağa dair Məsləhətlər

1. **Qlobal Dəyişənlərdən Çəkinin**:
   - Qlobal dəyişənlər tətbiqin bütün iş müddətində çatımlı qalır ki, bu da yaddaş sızıntılarına səbəb ola bilər. Lokal dəyişənlər və funksiyalardan istifadə edərək görünürlüğü məhdudlaşdırın.

2. **Bağlamalardan (Closures) Doğru İstifadə Edin**:
   - Bağlamalar dəyişənlərə istinadları saxlaya bilər ki, bu da onların zibil toplamasını qarşısını ala bilər. Lazımsız istinadları saxlamadığınıza əmin olun.

3. **Hadisə Dinləyicilərini (Event Handlers) Çıxarın**:
   - Hadisə dinləyiciləri DOM elementlərinə istinadları saxlaya bilər. Artıq lazım olmadıqda hadisə dinləyicilərini çıxarın.

4. **WeakMap və WeakSet-dən İstifadə Edin**:
   - Bu strukturlar obyektlərə zəif istinadlar saxlamağa imkan verir ki, bu da onların zibil toplamasını qarşısını almır.

#### WeakMap-dən İstifadə Nümunəsi:

```javascript
let wm = new WeakMap();
let obj = {};

wm.set(obj, "some value");
console.log(wm.get(obj));  // Çıxış: "some value"

obj = null;  // Obyekt zibil toplayıcı tərəfindən silinəcək, çünki WeakMap bu qarşısını almır
```

### Nəticə

JavaScript-də zibil toplama yaddaşı avtomatik olaraq idarə etməyə kömək edir, amma onun iş prinsipini başa düşmək və ən yaxşı təcrübələrə əməl etmək yaddaş sızıntılarının qarşısını almağa və tətbiqlərin performansını yaxşılaşdırmağa kömək edə bilər.